---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    io.kompose.service: minio
    app.kubernetes.io/name: minio
  name: minio
spec:
  replicas: 1
  selector:
    matchLabels:
      io.kompose.service: minio
  strategy:
    type: Recreate
  template:
    metadata:
      annotations:
        appscope.dev/disable: "true"
      labels:
        io.kompose.service: minio
        app.kubernetes.io/name: minio
    spec:
      imagePullSecrets:
      - name: dhub
      initContainers:
      - name: install
        image: alpine:latest
        command:
        - mkdir
        - -p
        - /data/data_collection_demo
        - /data/flowlogs
        - /data/archival
        volumeMounts:
        - name:  minio
          mountPath: "/data"
      containers:
        - args:
            - server
            - /data
          env:
            - name: MINIO_ACCESS_KEY
              value: ACCESSKEY
            - name: MINIO_SECRET_KEY
              value: SECRETKEY
          image: minio/minio:latest
          name: minio
          ports:
            - containerPort: 9000
          volumeMounts:
            - mountPath: /data
              name: minio
          resources:
            limits:
              cpu: 750m
              memory: 1024Mi
            requests:
              cpu: 250m
              memory: 256Mi

      restartPolicy: Always
      volumes:
        - name: minio
          persistentVolumeClaim:
            claimName: minio
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  labels:
    io.kompose.service: minio
    app.kubernetes.io/name: minio
  name: minio
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 20Gi
status: {}
---
apiVersion: v1
kind: Service
metadata:
  labels:
    io.kompose.service: minio
  name: minio
spec:
  type: NodePort
  ports:
    - name: "9000"
      port: 9000
      targetPort: 9000
  selector:
    io.kompose.service: minio
status:
  loadBalancer: {}
